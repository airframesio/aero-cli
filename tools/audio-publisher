#!/usr/bin/env python3

import sys
import signal
import socket
import struct
import zmq

from PyQt5.QtCore import QCoreApplication, QIODevice, QObject, QSocketNotifier, QTimer, pyqtSignal
from PyQt5.QtMultimedia import QAudio, QAudioDeviceInfo, QAudioFormat, QAudioInput

"""
    parser = ArgumentParser()
    parser.add_argument("--url", default="tcp://127.0.0.1:5555")
    parser.add_argument(
        "-n", "--count", default=10, type=int, help="number of arrays to send"
    )
    parser.add_argument(
        "--size",
        default=1024,
        type=int,
        help="size of the arrays to send (length of each dimension). Total size is size**nd",
    )
    parser.add_argument("--nd", default=2, type=int, help="number of dimensions")
    args = parser.parse_args()
    bind_to = args.url
    ctx = zmq.Context()
    s = ctx.socket(zmq.XPUB)
    s.bind(bind_to)
    print("Waiting for subscriber")
    s.recv()
    print("Sending arrays...")
    shape = (args.size,) * args.nd
    for i in range(args.count):
        a = numpy.random.random(shape)
        send_array(s, a)
    s.send_json({"done": True})
    print("   Done.")	
"""

class EventNotifier(QObject):
	interrupt = pyqtSignal()
	hangup = pyqtSignal()
	
	sigintFd = (None, None)
	sighupFd = (None, None)
		
	def __init__(self, parent: QObject = None):
		QObject.__init__(self, parent)

		EventNotifier.sigintFd = socket.socketpair(socket.AF_UNIX, socket.SOCK_STREAM, 0)
		EventNotifier.sighupFd = socket.socketpair(socket.AF_UNIX, socket.SOCK_STREAM, 0)
				
		self.snInt = QSocketNotifier(EventNotifier.sigintFd[1].fileno(), QSocketNotifier.Read, self)
		self.snInt.activated.connect(self.handleSigInt)

		self.snHup = QSocketNotifier(EventNotifier.sighupFd[1].fileno(), QSocketNotifier.Read, self)
		self.snHup.activated.connect(self.handleSigHup)
		
	def handleSigInt(self):
		self.snInt.setEnabled(False)
		self.interrupt.emit()
		self.snInt.setEnabled(True)

	def handleSigHup(self):
		self.snHup.setEnabled(False)
		self.hangup.emit()
		self.snHup.setEnabled(True)
		
	@staticmethod
	def sigintSignalHandler(*args):
		EventNotifier.sigintFd[0].sendall(b"\x00")

	@staticmethod
	def sighupSignalHandler(*args):
		EventNotifier.sighupFd[0].sendall(b"\x00")
		
	@staticmethod
	def setup():
		signal.signal(signal.SIGINT, EventNotifier.sigintSignalHandler)
		signal.signal(signal.SIGHUP, EventNotifier.sighupSignalHandler)


class AudioPublisher(QIODevice):
	completed = pyqtSignal()
	
	def __init__(self, targetDevice: QAudioDeviceInfo, parent: QObject = None):
		QIODevice.__init__(self, parent)

		self.targetDevice = targetDevice
		
		self.targetFormat = QAudioFormat()
		self.targetFormat.setSampleRate(48000)
		self.targetFormat.setChannelCount(1)
		self.targetFormat.setSampleSize(16)
		self.targetFormat.setCodec("audio/pcm")
		self.targetFormat.setByteOrder(QAudioFormat.LittleEndian)
		self.targetFormat.setSampleType(QAudioFormat.SignedInt)

		self.targetInput = QAudioInput(self.targetDevice, self.targetFormat, self)
		self.targetInput.setBufferSize(48000)

		self.zmqCtx = zmq.Context()
		self.zmqPub = self.zmqCtx.socket(zmq.PUB)
		self.zmqPub.setsockopt(zmq.TCP_KEEPALIVE, 1)
		self.zmqPub.setsockopt(zmq.TCP_KEEPALIVE_CNT, 10)
		self.zmqPub.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 1)
		self.zmqPub.setsockopt(zmq.TCP_KEEPALIVE_INTVL, 1)
		self.zmqPub.setsockopt(zmq.RECONNECT_IVL, 1000)
		self.zmqPub.setsockopt(zmq.RECONNECT_IVL_MAX, 0)
		self.zmqPub.bind("tcp://*:6002")
		
		  
	def start(self):
		success = False

		try:
			QIODevice.open(self, QIODevice.WriteOnly)
			self.targetInput.start(self)
			
			success = True
		finally:
			if not success:
				self.completed.emit()
			
	def stop(self):
		self.targetInput.stop()
		QIODevice.close(self)

		print("Exiting...")
		self.completed.emit()

	def writeData(self, buf: bytes) -> int:
		self.zmqPub.send(b"VFO00", zmq.SNDMORE)
		self.zmqPub.send(struct.pack("<I", 48000), zmq.SNDMORE)
		self.zmqPub.send(buf)
		return len(buf)
				
	def readData(self, *args, **kwargs) -> int:
		return 0

	def handleInterrupt(self):
		self.stop()
		print("SIGINT detected.")

	def handleHangup(self):
		print("SIGHUP detected.")

if __name__ == "__main__":
	app = QCoreApplication(sys.argv)

	targetDevice = None
	for dev in QAudioDeviceInfo.availableDevices(QAudio.AudioInput):
		if dev.deviceName().endswith("monitor"):
			targetDevice = dev
			break

	notifier = EventNotifier()
	publisher = AudioPublisher(targetDevice)
	
	publisher.completed.connect(app.quit)
	notifier.interrupt.connect(publisher.handleInterrupt)
	notifier.hangup.connect(publisher.handleHangup)
	QTimer.singleShot(0, publisher.start)

	EventNotifier.setup()
	
	sys.exit(app.exec_())
